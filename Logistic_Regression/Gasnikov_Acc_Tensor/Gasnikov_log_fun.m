%% Tensor Gasnikov's Method
% This code runs the third order tensor Nesterov's method for the Logistic
% Regression Problem

% Input parameters:
%  -- p:  Order of smoothness of the objective function (p=3 only)
%  -- T:  Number of iterations
%  -- N:  Maximum number of iterations of the inner problem loop
%  -- X_data:  Transpose matrix with the data points
%  -- label:  Vector with the labels (-1,1)
% 
% Output:
%  -- x:   Optimization trajectory generated by the algoritm
%  -- tot_fun: Function values evaluated at the generated trajectories

function [y,tot_fun] = Gasnikov_log_fun(p,T,N,X_data,label)

[n,d] = size(X_data);

X_data = X_data/norm(full(X_data),2);  % Data Normalization to remove dependency on the Data matrix norm
XXdata = X_data;
XXdata(label==-1,:) = -XXdata(label==-1,:);

%% Define Auxiliary variables and optimization parameters

L3 =(1/8)/d;      % Lispchitz Constants

tau = 1.1;
M = tau^2*L3;
gamma = tau*(tau+1)*L3/2;

C = p/2*sqrt((p+1)/(p-1)*(M^2 - L3^2));

options = optimset('Display','off','TolX',1e-12);

%% Initialization of the variables
A = 0;
tot_fun = zeros(1,T+1);

u = zeros(n,1);
y = zeros(n,T);
tot_fun(1) = log_reg(XXdata,y(:,1),0,d);

R_k = 5;

%% Compute initial condition for line search
disp('Start Iterations')

for i=1:T

    y_in = y(:,i);
    
    min_R = 1e-10;
    max_R = 10;

    [max_val,~,~,~] = logistic_sol_gasnikov(max_R,A,y_in,p,u,n,tau,M,N,L3,gamma,options,XXdata,d);
    [min_val,~,~,~] = logistic_sol_gasnikov(min_R,A,y_in,p,u,n,tau,M,N,L3,gamma,options,XXdata,d);
    
    condition =0;
    while condition == 0
    
        R_k = abs(max_R + min_R)/2;
        [val,y_out,Ap,a] = logistic_sol_gasnikov(R_k,A,y_in,p,u,n,tau,M,N,L3,gamma,options,XXdata,d);

        if (val <= min_val) && (val >= 1)
            min_val = val; 
            min_R = R_k;
        else
             max_val = val;
             max_R = R_k;
         end
%         if (val >= max_val) && (val <= 0.5)

%         end
        
        if (val>=0.5) && (val <=1)
            condition =1;
        end
        
    end
    y(:,i+1) = y_out;

    tot_fun(i+1) = log_reg(XXdata,y(:,i+1),0,d);

    u = u - a*grad_log_reg(XXdata,y(:,i+1),0,d);
    
    A = Ap;

    plot(tot_fun(1:i+1))
%     nerr(i) = sum(label ~= sign(X_data*y(:,i+1)));
%     plot(nerr)
    drawnow;
end


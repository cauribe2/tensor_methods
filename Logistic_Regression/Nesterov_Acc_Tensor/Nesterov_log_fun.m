%% Tensor Nesterov's Method
% This code runs the third order tensor Nesterov's method for the Logistic
% Regression Problem

% Input parameters:
%  -- p:  Order of smoothness of the objective function (p=3 only)
%  -- T:  Number of iterations
%  -- N:  Maximum number of iterations of the inner problem loop
%  -- X_data:  Transpose matrix with the data points
%  -- label:  Vector with the labels (-1,1)
% 
% Output:
%  -- x:   Optimization trajectory generated by the algoritm
%  -- tot_fun: Function values evaluated at the generated trajectories

function [x,tot_fun] = Nesterov_log_fun(p,T,N,X_data,label)

[n,d] = size(X_data);

X_data = X_data/norm(full(X_data),2);  % Data Normalization to remove dependency on the Data matrix norm
XXdata = X_data;
XXdata(label==-1,:) = -XXdata(label==-1,:);

%% Define Auxiliary variables and optimization parameters

L3 =(1/8)/d;      % Lispchitz Constants

tau=1.1;
M = tau^2*L3;
gamma = tau*(tau+1)/2*L3;

C = p/2*sqrt((p+1)/(p-1)*(M^2 - L3^2));

options = optimset('Display','off','TolX',1e-12);

%% Initialization of the variables
x0 = zeros(n,1);
x(:,1) = Nes_log_Inner(x0,n,tau,M,N,L3,gamma,options,XXdata,d);

nu = zeros(n,1);
sk = zeros(n,1);

tot_fun = zeros(1,T+1);
tot_fun(1) = log_reg(XXdata,x(:,1),0,d);

for i=1:T
    
    A = (((p-1)*(M^2-L3^2))/(4*(p+1)*M^2))^(p/2)*(i/(p+1))^(p+1);
    Ap = (((p-1)*(M^2-L3^2))/(4*(p+1)*M^2))^(p/2)*((i+1)/(p+1))^(p+1);
    a = Ap-A;
    
    y = A/Ap*x(:,i) + a/Ap*nu;    
    
    xt = Nes_log_Inner(y,n,tau,M,N,L3,gamma,options,XXdata,d);

    x(:,i+1) = xt + y;

    tot_fun(i+1) = log_reg(XXdata,x(:,i+1),0,d);

    sk = sk + a*grad_log_reg(XXdata,x(:,i+1),0,d);
 
    nu = - (factorial(p)/(C*norm(sk,2)^(p-1)))^(1/p)*sk;

%     semilogy(tot_fun(1:i+1) )
%     drawnow;
end